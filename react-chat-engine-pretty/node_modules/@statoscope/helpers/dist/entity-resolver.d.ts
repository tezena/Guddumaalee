export declare function normalizeId<TID>(id: TID): TID | string;
export declare type IDModifier<TID> = (id: TID) => TID;
export declare function getIdWrapper<TID, TEntity>(getId: GetIDFn<TID, TEntity>, idModifier?: IDModifier<TID>): GetIDFn<TID | string, TEntity>;
export declare type Entities<TEntity> = TEntity[] | Set<TEntity> | Map<unknown, TEntity> | Record<string, TEntity>;
export declare type ResolverAPI = {
    lock(): void;
    unlock(): void;
};
export declare type ResolverFn<TID, TReturn> = (id: TID) => TReturn | null;
export declare type Resolver<TID, TReturn> = ResolverFn<TID, TReturn> & ResolverAPI;
export declare type GetIDFn<TID, TEntity> = (entity: TEntity) => TID;
export default function makeResolver<TID, TEntity, TReturn = TEntity>(entities: Entities<TEntity>, getId: (entity: TEntity) => TID, get?: ((entity: TEntity) => TReturn) | null, locked?: boolean): Resolver<TID, TReturn>;
